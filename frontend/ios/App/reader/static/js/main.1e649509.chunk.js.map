{"version":3,"sources":["fonts/lora-latin-400.woff","fonts/lora-latin-700.woff","fonts/noto-sans-kr-latin-400.woff","fonts/noto-sans-kr-latin-500.woff","fonts/noto-sans-kr-latin-700.woff","utills/event.ts","bridge.tsx","utills/hooks.ts","components/Dict/index.tsx","components/SentenceSelector/index.tsx","components/SwipeItemChildren/index.tsx","components/Reader/index.tsx","components/Quiz/index.tsx","components/Wrapper/index.tsx","index.tsx"],"names":["module","exports","LiteEvent","handlers","handler","this","push","filter","h","data","console","log","slice","forEach","Webapp","onFlushPaginate","onCancelSelect","onStartReader","onStartQuiz","window","app","DevAppImpl","IOSAppImpl","sentences","sid","trigger","questions","qid","load","word","i","sids","JSON","stringify","addable","words","pron","defs","def","id","wordIndex","option","answer","resolveDict","undefined","webkit","messageHandlers","bridge","postMessage","type","Promise","res","rej","right","useOutsideClickObserver","ref","callback","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","useLiteEventObserver","deps","handleEvent","v","on","off","DictContainer","styled","div","props","up","css","hide","DictWordComponent","DictDefsComponent","DictButtons","DictButton","enabled","Dict","useState","setRes","pos","setPos","dictRef","useRef","selectedWord","sentenceId","dictSearch","out","parse","then","str","webapp","cancelSelect","resWord","notFound","node","length","onClick","map","key","addUnknownWord","SentenceSelectorContainer","top","bottom","SentenceSelector","conRef","selectedSentence","addUnknownSentence","SentenceComponent","p","inline","selected","WordComponent","span","first","pat","SwipeItem","setSelectedWord","setSelectedSentence","touch","figureSentenceUp","parentRect","parentElement","getBoundingClientRect","myRect","figureWordUp","onTouchWord","j","k","x","y","clearTimeout","timer","setTimeout","handle","n","wordSelected","Math","floor","toString","sentence","start","content","split","s","onTouchEnd","onTouchMove","e","touches","clientX","clientY","sqrt","onTouchCancel","onTouchStart","match","Main","Swipe","ReactSwipe","loading","Reader","_dividePositions","setDividePositions","swipeItemRefs","swipeRef","idToPage","Map","readingSentence","dividePositions","getPageSentences","page","atHandle","readingPage","get","atStart","atEnd","atMiddle","readingSentenceChange","setLoading","lastItem","parentBounds","parentTop","parentHeight","height","pageTop","currentPage","cutPos","children","Array","fill","flatMap","_","sen","reduce","tuple","set","paginate","swipeOptions","startSlide","continuous","sens","getPos","old","neww","r","childCount","style","cursor","SwipeItemChildren","QuestionComponent","OptionComponent","OptionContainer","NextButton","ButtonContainer","Container","Quiz","readingQuestion","setReadingQuestion","setAnswer","_i","findIndex","o","question","submit","submitQuestion","options","endQuiz","newReadingQuestion","w","Wrapper","state","setState","initComplete","GlobalStyle","createGlobalStyle","navigator","userAgent","setIOS","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1e649509.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lora-latin-400.0d78d370.woff\";","module.exports = __webpack_public_path__ + \"static/media/lora-latin-700.1617380e.woff\";","module.exports = __webpack_public_path__ + \"static/media/noto-sans-kr-latin-400.4c50be0f.woff\";","module.exports = __webpack_public_path__ + \"static/media/noto-sans-kr-latin-500.28601458.woff\";","module.exports = __webpack_public_path__ + \"static/media/noto-sans-kr-latin-700.b9e989a9.woff\";","interface ILiteEvent<T> {\r\n  on(handler: { (data?: T): void }) : void;\r\n  off(handler: { (data?: T): void }) : void;\r\n}\r\n\r\nexport class LiteEvent<T> implements ILiteEvent<T> {\r\n  private handlers: { (data?: T): void; }[] = [];\r\n\r\n  public on(handler: { (data?: T): void }) : void {\r\n      this.handlers.push(handler);\r\n  }\r\n\r\n  public off(handler: { (data?: T): void }) : void {\r\n      this.handlers = this.handlers.filter(h => h !== handler);\r\n  }\r\n\r\n  public trigger(data?: T) {\r\n      console.log(this.handlers);\r\n      this.handlers.slice(0).forEach(h => h(data));\r\n  }\r\n\r\n  public expose() : ILiteEvent<T> {\r\n      return this;\r\n  }\r\n}\r\n","import { Sentence, DictSearchResult, Question } from \"./model\";\r\nimport { LiteEvent } from \"./utills/event\";\r\n\r\nexport interface App {\r\n  initComplete(): void;\r\n  setLoading(loading: boolean): void;\r\n  atStart(): void;\r\n  atMiddle(): void;\r\n  atEnd(): void;\r\n  paginate(sids: string[]): void;\r\n  wordSelected(word: string, i: number, sid: string): void;\r\n  sentenceSelected(sid: string): void;\r\n  readingSentenceChange(sid: string): void;\r\n  dictSearch(word: string): string | Promise<string>;\r\n  addUnknownWord(sid: string, wordIndex: number, word: string, def: string): void;\r\n  addUnknownSentence(sid: string): void;\r\n\r\n  submitQuestion(qid: string, option: string, right: boolean): void;\r\n  setReadingQuestion(qid: string): void;  //TODO change name\r\n  endQuiz(): void;\r\n}\r\n\r\nexport class Webapp {\r\n  readonly onFlushPaginate = new LiteEvent<void>();\r\n  readonly onCancelSelect = new LiteEvent<void>();\r\n  readonly onStartReader = new LiteEvent<{sentences: Sentence[], sid: string}>();\r\n  readonly onStartQuiz = new LiteEvent<{questions: Question[]; qid: string}>();\r\n\r\n  setDev() {\r\n    window.app = new DevAppImpl();\r\n  }\r\n\r\n  setIOS() {\r\n    window.app = new IOSAppImpl();\r\n  }\r\n\r\n  startReader(sentences: Sentence[], sid: string) {\r\n    this.onStartReader.trigger({\r\n      sentences: sentences,\r\n      sid: sid\r\n    });\r\n  }\r\n\r\n  startQuiz(questions: Question[], qid: string) {\r\n    this.onStartQuiz.trigger({questions:questions, qid: qid});\r\n  }\r\n\r\n  flushPaginate() {\r\n    this.onFlushPaginate.trigger();\r\n  }\r\n\r\n  cancelSelect() {\r\n    this.onCancelSelect.trigger();\r\n  }\r\n}\r\n\r\nclass DevAppImpl implements App {\r\n  constructor() {}\r\n\r\n  initComplete() {\r\n    console.log(\"[app] init complete\");\r\n  }\r\n\r\n  setLoading(load: boolean) {\r\n    console.log(\"[app] loading: \" + load);\r\n  }\r\n\r\n  atStart() {\r\n    console.log(\"[app] at start\");\r\n  }\r\n\r\n  atMiddle() {\r\n    console.log(\"[app] at middle\");\r\n  }\r\n\r\n  atEnd() {\r\n    console.log(\"[app] at end\");\r\n  }\r\n\r\n  wordSelected(word: string, i: number, sid: string) {\r\n    console.log(\"[app] at end i: \" + i + \" sid:\" + sid);\r\n  }\r\n\r\n  paginate(sids: string[]) {\r\n    console.log(\"[app] paginate sids\");\r\n    console.log(sids)\r\n  }\r\n\r\n  sentenceSelected(sid: string) {\r\n    console.log(\"[app] sentence selected sid:\"+ sid);\r\n  }\r\n\r\n  readingSentenceChange(sid: string) {\r\n    console.log(\"[app] reading setence changed\");\r\n  }\r\n\r\n  dictSearch(word: string): string {\r\n    const out: DictSearchResult = {\r\n      addable: false,\r\n      words: [\r\n        {\r\n          word: \"hello\",\r\n          pron: \"\",\r\n          defs: [\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            },\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            },\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            },\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            },\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            },\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            },\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          word: \"hello\",\r\n          pron: \"\",\r\n          defs: [\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            },\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            },\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            },\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            },\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            },\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            },\r\n            {\r\n              def: \"asdfasf\",\r\n              id: 1,\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n    return JSON.stringify(out);\r\n  }\r\n\r\n  addUnknownSentence(sid: string) {\r\n    console.log(`addUnknownSentence sid: ${sid}`);\r\n  }\r\n\r\n  addUnknownWord(sid: string, wordIndex: number, word: string, def: string) {\r\n    console.log(`addUnknownWord sid: ${sid} wordIndex: ${wordIndex} word: ${word} def: ${def}`);\r\n  }\r\n\r\n  submitQuestion(qid: string, option: string, answer: boolean) {\r\n\r\n  }\r\n\r\n  setReadingQuestion(qid: string) {\r\n\r\n  }\r\n\r\n  endQuiz() {\r\n\r\n  }\r\n}\r\n\r\nclass IOSAppImpl implements App {\r\n  resolveDict?: (res: string) => void = undefined;\r\n  constructor() {}\r\n\r\n  initComplete() {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"initComplete\"})\r\n  }\r\n\r\n  setLoading(load: boolean) {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"setLoading\", load: load})\r\n  }\r\n\r\n  atStart() {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"atStart\"})\r\n  }\r\n\r\n  atMiddle() {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"atMiddle\"})\r\n  }\r\n\r\n  atEnd() {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"atEnd\"})\r\n  }\r\n\r\n  wordSelected(word: string, i: number, sid: string) {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"wordSelected\", i: i, sid: sid, word: word})\r\n  }\r\n\r\n  paginate(sids: string[]) {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"paginate\", sids: sids})\r\n  }\r\n\r\n  sentenceSelected(sid: string) {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"sentenceSelected\", sid: sid})\r\n  }\r\n\r\n\r\n  readingSentenceChange(sid: string) {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"readingSentenceChange\", sid: sid})\r\n  }\r\n\r\n  dictSearch(word: string): Promise<string> {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"dictSearch\", word: word})\r\n    return new Promise((res, rej) => {\r\n      this.resolveDict = res;\r\n    });\r\n  }\r\n\r\n  dictSearchResolve(res: string) {\r\n    if (this.resolveDict) {\r\n      this.resolveDict(res);\r\n    }\r\n  }\r\n\r\n  addUnknownSentence(sid: string) {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"addUnknownSentence\", sid: sid})\r\n    console.log(`addUnknownSentence sid: ${sid}`);\r\n  }\r\n\r\n  addUnknownWord(sid: string, wordIndex: number, word: string, def: string) {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"addUnknownWord\", sid: sid, wordIndex: wordIndex, word: word, def: def})\r\n  }\r\n\r\n  submitQuestion(qid: string, option: string, right: boolean) {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"submitQuestion\", qid: qid, option: option, right: right})\r\n  }\r\n\r\n  setReadingQuestion(qid: string) {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"setReadingQuestion\", qid: qid})\r\n  }\r\n\r\n  endQuiz() {\r\n    window.webkit.messageHandlers.bridge.postMessage({type: \"endQuiz\"})\r\n  }\r\n}\r\n\r\n","import { MutableRefObject, useEffect } from \"react\";\r\nimport { LiteEvent } from \"./event\";\r\n\r\nexport function useOutsideClickObserver(\r\n  ref: MutableRefObject<HTMLElement | null | undefined>,\r\n  callback: () => void\r\n) {\r\n  function handleClickOutside(event: any) {\r\n    if (ref.current && !ref.current.contains(event.target)) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"touchstart\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"touchstart\", handleClickOutside);\r\n    };\r\n  });\r\n}\r\n\r\nexport function useLiteEventObserver<T>(\r\n  event: LiteEvent<T>,\r\n  callback: (v?: T) => void,\r\n  deps: any\r\n) {\r\n  function handleEvent(v?: T) {\r\n    callback(v)\r\n  }\r\n\r\n  useEffect(() => {\r\n    event.on(handleEvent);\r\n    return () => {\r\n      event.off(handleEvent);\r\n    }\r\n  }, deps);\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { SelectedWord, DictSearchResult, DictWord } from \"../../model\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { useOutsideClickObserver } from \"../../utills/hooks\";\r\nimport { instanceOf } from \"prop-types\";\r\n\r\nconst DictContainer = styled.div<{ up: boolean; hide: boolean }>`\r\n  position: fixed;\r\n  font-family: 'Noto Sans KR', sans-serif;\r\n  font-size: 14px;\r\n  ${props =>\r\n    props.up\r\n      ? css`\r\n          top: 10px;\r\n        `\r\n      : css`\r\n          bottom: 10px;\r\n        `}\r\n  ${props =>\r\n    props.hide &&\r\n    css`\r\n      visibility: none;\r\n    `}\r\n  background: white;\r\n  height: calc(40%);\r\n  width: calc(100% - 40px);\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3), 0 15px 12px rgba(0, 0, 0, 0.22);\r\n  margin-left: 20px;\r\n  z-index: 999;\r\n`;\r\n\r\nconst DictWordComponent = styled.div`\r\n  flex-shrink: 0;\r\n  margin-bottom: 10px;\r\n  padding-top: 10px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  font-weight: 500;\r\n  font-size: 21px;\r\n`;\r\n\r\nconst DictDefsComponent = styled.div`\r\n  margin-top: 5px;\r\n  overflow-y: auto;\r\n  font-weight: 400;\r\n  & > div {\r\n    background: lightgray;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n    border-radius: 10px;\r\n    &:active {\r\n      background: gray;\r\n    }\r\n  }\r\n`;\r\n\r\nconst DictButtons = styled.div`\r\n  display: flex;\r\n  flex-shrink: 0;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  padding-top: 10px;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst DictButton = styled.div<{ enabled: boolean }>`\r\n  padding: 7px;\r\n  background: #AB7756;\r\n  font-weight: 700;\r\n  color: white;\r\n  ${props =>\r\n    !props.enabled &&\r\n    css`\r\n      opacity: 0;\r\n      pointer-events: none;\r\n    `}\r\n`;\r\n\r\ninterface Props {\r\n  selectedWord: SelectedWord;\r\n}\r\n\r\nconst Dict: React.FC<Props> = props => {\r\n  const [res, setRes] = useState<DictSearchResult | undefined>(undefined);\r\n  const [pos, setPos] = useState(0);\r\n  const dictRef = useRef<HTMLElement | null | undefined>(undefined);\r\n  const { word, wordIndex, up, sentenceId } = props.selectedWord;\r\n\r\n  useEffect(() => {\r\n    const res = window.app.dictSearch(word);\r\n    if (typeof res === 'string') {\r\n      const out: DictSearchResult = JSON.parse(res);\r\n      setRes(out);\r\n    } else {\r\n      res.then((str) => {\r\n        const out: DictSearchResult = JSON.parse(str);\r\n        setRes(out);\r\n      })\r\n    }\r\n  }, [props]);\r\n\r\n  useOutsideClickObserver(dictRef, () => {\r\n    console.log(\"asdf\");\r\n    window.webapp.cancelSelect();\r\n  });\r\n\r\n  const result = (resWord: DictWord) => {\r\n    return (\r\n      <>\r\n        {res!.words.length !== 1 && (\r\n          <DictButtons>\r\n            <DictButton\r\n              onClick={() => {\r\n                setPos(pos - 1);\r\n              }}\r\n              enabled={pos !== 0}\r\n            >\r\n              prev\r\n            </DictButton>\r\n            <DictButton\r\n              onClick={() => {\r\n                setPos(pos + 1);\r\n              }}\r\n              enabled={pos !== res!.words.length - 1}\r\n            >\r\n              next\r\n            </DictButton>\r\n          </DictButtons>\r\n        )}\r\n        <DictWordComponent>{resWord.word}</DictWordComponent>\r\n        <DictDefsComponent>\r\n          {resWord.defs.map((def, i) => (\r\n            <div key={i} onClick={() => {\r\n              window.app.addUnknownWord(sentenceId, wordIndex, resWord.word, def.def);\r\n              window.webapp.cancelSelect();\r\n            }}>{def.def}</div>\r\n          ))}\r\n        </DictDefsComponent>\r\n      </>\r\n    );\r\n  };\r\n  const notFound = <div>Not found</div>;\r\n  return (\r\n    <DictContainer hide={!res} ref={node => (dictRef.current = node)} up={up}>\r\n      {res && res.words[pos] ? result(res.words[pos]) : notFound}\r\n    </DictContainer>\r\n  );\r\n};\r\n\r\nexport default Dict;\r\n","import React, { useRef } from \"react\";\r\nimport { SelectedSentence } from \"../../model\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { useOutsideClickObserver } from \"../../utills/hooks\";\r\n\r\nconst SentenceSelectorContainer = styled.div<{  bottom: number; top: number; up: boolean;}>`\r\n  display: flex;\r\n  position: fixed;\r\n  ${props => {\r\n    if (props.up) {\r\n      return css`\r\n        top: ${props.top - 60}px;\r\n      `;\r\n    } else {\r\n      return css`\r\n        top: ${props.bottom + 8}px;\r\n      `;\r\n    }\r\n  }}\r\n\r\n  & > div {\r\n    background: #AB7756;\r\n    padding: 4px;\r\n    margin-left: 6px;\r\n    font-family: 'Noto Sans KR', sans-serif;\r\n    font-weight: 700;\r\n    color: white;\r\n  }\r\n  z-index: 999;\r\n`;\r\n\r\ninterface Props {\r\n  selectedSentence: SelectedSentence;\r\n}\r\n\r\nconst SentenceSelector: React.FC<Props> = props => {\r\n  const conRef = useRef<HTMLElement | undefined | null>(undefined);\r\n  useOutsideClickObserver(conRef, () => {\r\n    window.webapp.cancelSelect();\r\n  });\r\n\r\n  return (\r\n    <SentenceSelectorContainer\r\n      ref={node => {\r\n        conRef.current = node;\r\n      }}\r\n      up={props.selectedSentence.up}\r\n      top={props.selectedSentence.top}\r\n      bottom={props.selectedSentence.bottom}\r\n    >\r\n      <div onClick={() => {\r\n        window.app.addUnknownSentence(props.selectedSentence.sentenceId);\r\n        window.webapp.cancelSelect();\r\n      }}>I have no idea!</div>\r\n    </SentenceSelectorContainer>\r\n  );\r\n};\r\n\r\nexport default SentenceSelector;\r\n","import React, { MutableRefObject, useRef, useState, useEffect } from \"react\";\r\nimport { Sentence, SelectedWord, SelectedSentence } from \"../../model\";\r\nimport styled, { css } from \"styled-components\";\r\nimport Dict from \"../Dict\";\r\nimport SentenceSelector from \"../SentenceSelector\";\r\n\r\nconst SentenceComponent = styled.p<{ inline: boolean; selected: boolean }>`\r\n  padding: 0;\r\n  margin: 10px 0;\r\n\r\n  ${props =>\r\n    !props.inline &&\r\n    css`\r\n      display: inline;\r\n      margin: 0;\r\n    `}\r\n  ${props =>\r\n    props.selected &&\r\n    css`\r\n      display: block;\r\n      background: gray;\r\n      padding: 4px;\r\n      font-weight: 700;\r\n      color: white;\r\n    `}\r\n`;\r\n\r\nconst WordComponent = styled.span<{ selected: boolean; first: boolean }>`\r\n  display: inline;\r\n  ${props =>\r\n    props.selected &&\r\n    css`\r\n      display: inline;\r\n      background: gray;\r\n      font-weight: 700;\r\n      color: white;\r\n    `}\r\n  ${props =>\r\n    props.first &&\r\n    css`\r\n      margin-left: 4px;\r\n    `}\r\n`;\r\n\r\nexport const pat = /([^a-zA-Z-']+)/;\r\n\r\ninterface Props {\r\n  sentences: Sentence[];\r\n}\r\n\r\nconst SwipeItem: React.FC<Props> = (props: Props) => {\r\n  const [selectedWord, setSelectedWord] = useState<SelectedWord | undefined>(undefined);\r\n  const [selectedSentence, setSelectedSentence] = useState<SelectedSentence | undefined>(\r\n    undefined\r\n  );\r\n  const touch: MutableRefObject<\r\n    { id: string; n: number; timer: number; x: number; y: number } | undefined\r\n  > = useRef(undefined);\r\n  const figureSentenceUp = (word: HTMLElement) => {\r\n    const parentRect = word.parentElement!.parentElement!.getBoundingClientRect();\r\n    const myRect = word.parentElement!.getBoundingClientRect();\r\n    return (parentRect.top - myRect.top) ** 2 > (myRect.bottom - parentRect.bottom) ** 2\r\n  }\r\n  const figureWordUp = (word: HTMLElement) => {\r\n    const parentRect = word.parentElement!.parentElement!.getBoundingClientRect();\r\n    const myRect = word.getBoundingClientRect();\r\n    return (parentRect.top - myRect.top) ** 2 > (myRect.bottom - parentRect.bottom) ** 2\r\n  }\r\n  const onTouchWord = (node: HTMLElement, j: number, k: number, word: string, x: number, y: number) => {\r\n    const id = `${j}-${k}`;\r\n    if (touch.current) {\r\n      setSelectedWord(undefined);\r\n      setSelectedSentence(undefined);\r\n      clearTimeout(touch.current.timer);\r\n      touch.current = undefined;\r\n    }\r\n    const handle = () => {\r\n      if (!touch.current) return;\r\n      if (touch.current.n === 1) {\r\n        setSelectedWord({\r\n          id: `${j}-${k}`,\r\n          word: word,\r\n          sentenceId: sentences[j].id,\r\n          wordIndex: k/2,\r\n          up: figureWordUp(node)\r\n        });\r\n        window.app.wordSelected(word, Math.floor(k / 2), sentences[j].id);\r\n        setSelectedSentence(undefined);\r\n        touch.current.n = 2;\r\n        touch.current.timer = setTimeout(() => {\r\n          handle();\r\n        }, 800);\r\n      } else if (touch.current.n === 2) {\r\n        setSelectedWord(undefined);\r\n        setSelectedSentence({\r\n          id: j.toString(),\r\n          sentenceId: sentences[j].id,\r\n          top: node.parentElement!.getBoundingClientRect().top,\r\n          bottom: node.parentElement!.getBoundingClientRect().bottom,\r\n          up: figureSentenceUp(node)\r\n        });\r\n        touch.current = undefined;\r\n      }\r\n    };\r\n    const timer = setTimeout(() => {\r\n      handle();\r\n    }, 300);\r\n    touch.current = {\r\n      n: 1,\r\n      timer: timer,\r\n      id: id,\r\n      x: x,\r\n      y: y\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    let handler: any;\r\n    if (selectedWord) {\r\n      handler = () => {\r\n        setSelectedWord(undefined);\r\n      };\r\n    } else if (selectedSentence) {\r\n      handler = () => {\r\n        setSelectedSentence(undefined);\r\n      };\r\n    }\r\n\r\n    if (handler) {\r\n      window.webapp.onCancelSelect.on(handler);\r\n    }\r\n    return () => {\r\n      if (handler) {\r\n        window.webapp.onCancelSelect.off(handler);\r\n      }\r\n    };\r\n  }, [selectedSentence, selectedWord]);\r\n\r\n  const { sentences } = props;\r\n\r\n  return (\r\n    <>\r\n      {\r\n        selectedWord &&\r\n        <Dict selectedWord={selectedWord}></Dict>\r\n      }\r\n      {\r\n        selectedSentence &&\r\n        <SentenceSelector selectedSentence={selectedSentence}></SentenceSelector>\r\n      }\r\n      {sentences.map((sentence, j) => (\r\n        <SentenceComponent\r\n          selected={selectedSentence ? selectedSentence.id === j.toString() : false}\r\n          inline={!sentence.start}\r\n          key={j}\r\n        >\r\n          {sentence.content.split(pat).filter(s => s.length !== 0).map((word: string, k: number) => (\r\n            <WordComponent\r\n              selected={ selectedWord ? selectedWord.id === `${j}-${k}` : false}\r\n              first={k===0}\r\n              key={k}\r\n              onTouchEnd={() => {\r\n                if (touch.current) {\r\n                  clearTimeout(touch.current.timer);\r\n                }\r\n              }}\r\n              onTouchMove={(e) => {\r\n                if (e.touches.length !== 1) {\r\n                  return;\r\n                }\r\n                const x = e.touches[0].clientX;\r\n                const y = e.touches[0].clientY;\r\n                if (touch.current && Math.sqrt((x-touch.current.x)**2 + (y-touch.current.y) ** 2) > 30) {\r\n                  clearTimeout(touch.current.timer);\r\n                }\r\n              }}\r\n              onTouchCancel={(e) => {\r\n                if (touch.current) {\r\n                  clearTimeout(touch.current.timer);\r\n                }\r\n              }}\r\n              onTouchStart={\r\n                !word.match(pat)\r\n                  ? (e) => {\r\n                      if (e.touches.length !== 1) {\r\n                        if (touch.current) {\r\n                          clearTimeout(touch.current.timer);\r\n                        }\r\n                        return;\r\n                      }\r\n                      onTouchWord(e.target as HTMLElement, j, k, word, e.touches[0].clientX, e.touches[0].clientY);\r\n                    }\r\n                  : undefined\r\n              }\r\n            >\r\n              {word}\r\n            </WordComponent>\r\n          ))}\r\n        </SentenceComponent>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SwipeItem;\r\n","import React, { useState, useEffect, useRef, MutableRefObject } from \"react\";\r\nimport ReactSwipe from \"react-swipe\";\r\nimport {\r\n  useOutsideClickObserver,\r\n  useLiteEventObserver\r\n} from \"../../utills/hooks\";\r\nimport SwipeItemChildren from \"../SwipeItemChildren\";\r\nimport { Sentence } from \"../../model\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst Main = styled.div`\r\n  height: calc(100vh - 20px);\r\n  padding: 10px 5px;\r\n  overflow: hidden;\r\n  width: calc(100% - 10px);\r\n`;\r\n\r\nconst SwipeItem = styled.div`\r\n  max-height: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Swipe = styled(ReactSwipe)<{ loading: boolean }>`\r\n  overflow: hidden;\r\n  height: 100%;\r\n  width: 100%;\r\n  & > div {\r\n    height: 100%;\r\n  }\r\n\r\n  & > * > div {\r\n    height: 100%;\r\n  }\r\n\r\n  ${props =>\r\n    props.loading &&\r\n    css`\r\n      opacity: 0;\r\n      pointer-events: none;\r\n    `}\r\n`;\r\n\r\ninterface Props {\r\n  sentences: Sentence[];\r\n  readingSentence: string;\r\n}\r\n\r\n// thanks to  https://github.com/yoo2001818\r\nconst Reader: React.FC<Props> = (props: Props) => {\r\n  const sentences = props.sentences;\r\n  const [_dividePositions, setDividePositions]: [any, any] = useState<number[]|null>(null);\r\n  const swipeItemRefs: any = useRef([]);\r\n\r\n  const swipeRef: MutableRefObject<ReactSwipe | null> = useRef(null);\r\n  const idToPage = useRef(new Map());\r\n  const readingSentence: MutableRefObject<string> = useRef(\r\n    props.readingSentence\r\n  );\r\n\r\n  const dividePositions = _dividePositions || [];\r\n\r\n  const getPageSentences = (page: number) => {\r\n    if (page === dividePositions.length) {\r\n      return sentences.slice(dividePositions[page - 1] || 0);\r\n    }\r\n    return sentences.slice(\r\n      dividePositions[page - 1] || 0,\r\n      dividePositions[page]\r\n    );\r\n  };\r\n\r\n  const atHandle = () => {\r\n    const readingPage = idToPage.current.get(readingSentence.current) || 0;\r\n    if (readingPage === 0) {\r\n      window.app.atStart();\r\n    }\r\n    if (readingPage === dividePositions.length) {\r\n      window.app.atEnd();\r\n    }\r\n    if (readingPage !== 0 && readingPage !== dividePositions.length) {\r\n      window.app.atMiddle();\r\n    }\r\n    window.app.readingSentenceChange(readingSentence.current);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (_dividePositions) {\r\n      window.app.setLoading(false);\r\n      atHandle();\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    // 마지막 페이지의 자를 노드 위치 계산\r\n    const lastItem = swipeItemRefs.current[0];\r\n    const parentBounds = lastItem.getBoundingClientRect();\r\n    const parentTop = parentBounds.top;\r\n    const parentHeight = parentBounds.height;\r\n    let pageTop = parentTop;\r\n    let currentPage = 0;\r\n    let cutPos: any = [];\r\n    // HTMLElement.children은 놀랍게도 배열이 아니라서 findIndex같은걸 못써요 ㅠㅠ\r\n    for (let i = 0; i < lastItem.children.length; i += 1) {\r\n      const childNode = lastItem.children[i]!;\r\n      const childBounds = childNode.getBoundingClientRect()!;\r\n      const offset = childBounds.bottom - pageTop + 20;\r\n      if (offset >= parentHeight) {\r\n        pageTop = (lastItem.children[i - 1] || lastItem.children[i]).getBoundingClientRect().bottom;\r\n        // 노드 위치는 dividePositions의 마지막 값만큼 뒤로 가있기 때문에 앞으로 다시\r\n        // 밀어주는 작업이 필요함\r\n        cutPos[currentPage] = i;\r\n        currentPage += 1;\r\n      }\r\n    }\r\n    const getPageSentencesByCutPos = (page: number) => {\r\n      if (page === cutPos.length) {\r\n        return sentences.slice(cutPos[page - 1] || 0);\r\n      }\r\n      return sentences.slice(\r\n        cutPos[page - 1] || 0,\r\n        cutPos[page]\r\n      );\r\n    };\r\n    readingSentence.current = props.readingSentence;\r\n    idToPage.current = Array(cutPos.length + 1)\r\n        .fill(1)\r\n        .flatMap((_: any, i: number) =>\r\n          getPageSentencesByCutPos(i).map(sen => [sen.id, i])\r\n        )\r\n        .reduce((map: Map<string, number>, tuple: any) => {\r\n          map.set(tuple[0], tuple[1]);\r\n          return map;\r\n        }, new Map());\r\n    setDividePositions(cutPos);\r\n  }, []);\r\n\r\n  useLiteEventObserver(\r\n    window.webapp.onFlushPaginate,\r\n    () => {\r\n      const current = idToPage.current.get(readingSentence.current) || 0;\r\n      window.app.paginate(getPageSentences(current).map(s => s.id));\r\n    },\r\n    []\r\n  );\r\n\r\n  const swipeOptions = {\r\n    startSlide: idToPage.current.get(readingSentence.current) || 0,\r\n    continuous: false,\r\n    callback: () => {\r\n      if (swipeRef.current) {\r\n        const sens = getPageSentences(swipeRef.current.getPos());\r\n        const old = idToPage.current.get(readingSentence.current) || 0;\r\n        const neww = idToPage.current.get(sens[0].id) || 0;\r\n        readingSentence.current = sens[0].id;\r\n        if (neww > old) {\r\n          window.app.paginate(getPageSentences(old).map(s => s.id));\r\n        }\r\n        window.webapp.cancelSelect();\r\n        atHandle();\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Main>\r\n      <Swipe\r\n        loading={!_dividePositions}\r\n        swipeOptions={swipeOptions}\r\n        ref={r => (swipeRef.current = r)}\r\n        childCount={dividePositions.length + 1}\r\n      >\r\n        {Array(dividePositions.length + 1)\r\n          .fill(1)\r\n          .map((_: any, i: number) => (\r\n            <SwipeItem\r\n              style={{cursor: 'pointer'}}\r\n              key={i}\r\n              ref={node => {\r\n                swipeItemRefs.current[i] = node;\r\n              }}\r\n            >\r\n              <SwipeItemChildren sentences={getPageSentences(i)} />\r\n            </SwipeItem>\r\n          ))}\r\n      </Swipe>\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default Reader;\r\n","import React, { useState, useEffect, useRef, MutableRefObject } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { Question } from \"../../model\";\r\nimport { pat } from \"../SwipeItemChildren\";\r\n\r\nconst Main = styled.div`\r\n  height: calc(100vh - 20px);\r\n  padding: 10px 10px;\r\n  width: calc(100% - 20px);\r\n  font-family: 'Noto Sans KR', sans-serif;\r\n  font-size: 17px;\r\n`;\r\n\r\nconst QuestionComponent = styled.div`\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst SentenceComponent = styled.div`\r\n  margin-top: 10px;\r\n  background: lightgray;\r\n  padding: 10px;\r\n  font-family: 'Lora', serif;\r\n`;\r\n\r\n\r\nconst WordComponent = styled.div<{selected: boolean}>`\r\n  display: inline;\r\n\r\n  ${props => (\r\n    props.selected && css`\r\n      background: gray;\r\n      padding: 4px;\r\n      font-weight: 700;\r\n      color: white;\r\n  `)}\r\n`;\r\n\r\nconst OptionComponent = styled.div<{selected: boolean}>`\r\n  margin-top: 10px;\r\n  padding: 10px;\r\n  background: #f5c3a4;\r\n\r\n  ${props => (\r\n    props.selected && css`\r\n      background: #bf9478;\r\n    `\r\n  )}\r\n`;\r\n\r\nconst OptionContainer = styled.div`\r\n  margin-top: auto;\r\n`;\r\n\r\nconst NextButton = styled.div<{selected: boolean}>`\r\n  padding: 10px 20px;\r\n  display: inline-block;\r\n  background: #AB7756;\r\n  opacity: 0;\r\n  color: white;\r\n\r\n  ${props => (\r\n    props.selected && css`\r\n      opacity: 1;\r\n    `\r\n  )}\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  margin-top: 50px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`;\r\n\r\n\r\ninterface Props {\r\n  questions: Question[];\r\n  readingQuestion: string;\r\n}\r\n\r\nconst Quiz: React.FC<Props> = (props: Props) => {\r\n  const { questions } = props;\r\n  const [readingQuestion, setReadingQuestion] = useState<string>(props.readingQuestion);\r\n  const [answer, setAnswer] = useState<number | null>(null);\r\n  const _i = questions.findIndex(o => o.id === readingQuestion);\r\n  const i = _i === -1 ? 0 : _i;\r\n  const question = questions[i];\r\n  useEffect(() => {\r\n    window.app.setLoading(false);\r\n  }, []);\r\n\r\n  const submit = () => {\r\n    if (answer == null) return;\r\n    window.app.submitQuestion(readingQuestion, question.options[answer], answer === question.answer);\r\n    if (i === questions.length - 1) {\r\n      window.app.endQuiz();\r\n    } else {\r\n      const newReadingQuestion = questions[i+1].id;\r\n      window.app.setReadingQuestion(newReadingQuestion)\r\n      setReadingQuestion(newReadingQuestion);\r\n      setAnswer(null);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Main>\r\n        {question.type === 'word' && (\r\n          <Container>\r\n            <QuestionComponent>\r\n              Choose the definition of highlighted word in this paragraph.\r\n            </QuestionComponent>\r\n            <SentenceComponent>\r\n              {question.sentence.split(pat).filter(w => w.length !== 0).map((word, i) => {\r\n                return <WordComponent selected={Math.floor(i/2) === question.wordIndex && !word.match(pat) }>{word}</WordComponent>;\r\n              })}\r\n            </SentenceComponent>\r\n            <OptionContainer>\r\n              {\r\n                question.options.map((option, j) => (\r\n                  <OptionComponent onClick={() => {\r\n                    setAnswer(j);\r\n                  }} key={j} selected={answer === j}>\r\n                    {option}\r\n                  </OptionComponent>\r\n                ))\r\n              }\r\n            </OptionContainer>\r\n            <ButtonContainer>\r\n              <NextButton onClick={() => {submit()}} selected={answer !== null}>Next</NextButton>\r\n            </ButtonContainer>\r\n          </Container>\r\n        )}\r\n        {question.type === 'summary' && (\r\n          <Container>\r\n            <QuestionComponent>\r\n              Choose the most accurate summary of the last chapter.\r\n            </QuestionComponent>\r\n            <OptionContainer>\r\n              {\r\n                question.options.map((option, j) => (\r\n                  <OptionComponent onClick={() => {\r\n                    setAnswer(j);\r\n                  }} key={j} selected={answer === j}>\r\n                    {option}\r\n                  </OptionComponent>\r\n                ))\r\n              }\r\n            </OptionContainer>\r\n            <ButtonContainer>\r\n              <NextButton onClick={() => {submit()}} selected={answer !== null}>Next</NextButton>\r\n            </ButtonContainer>\r\n          </Container>\r\n        )}\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n","import { useLiteEventObserver } from \"../../utills/hooks\";\r\nimport { useState, useEffect } from \"react\";\r\nimport React from \"react\";\r\nimport Reader from \"../Reader\";\r\nimport { Sentence, Question } from \"../../model\";\r\nimport Quiz from \"../Quiz\";\r\n\r\ninterface QuizState {\r\n  type: 'quiz';\r\n  qid: string;\r\n  questions: Question[];\r\n}\r\n\r\ninterface ReaderState {\r\n  type: 'reader';\r\n  sid: string;\r\n  sentences: Sentence[];\r\n}\r\n\r\ntype State = QuizState | ReaderState;\r\n\r\nconst Wrapper: React.SFC = () => {\r\n  const [state, setState] = useState<State | null>(null);\r\n  useLiteEventObserver(\r\n    window.webapp.onStartReader,\r\n    (event: any) => {\r\n      setState(null);\r\n      setState({\r\n        type: 'reader',\r\n        sentences: event.sentences,\r\n        sid: event.sid\r\n      });\r\n    },\r\n    []\r\n  );\r\n  useLiteEventObserver(\r\n    window.webapp.onStartQuiz,\r\n    (event: any) => {\r\n      setState(null);\r\n      setState({\r\n        type: 'quiz',\r\n        questions: event.questions,\r\n        qid: event.qid\r\n      });\r\n    },\r\n    []\r\n  );\r\n  useEffect(() => {\r\n    window.app.initComplete();\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      const data = Array(100)\r\n        .fill(1)\r\n        .map((x, y) => x + y)\r\n        .map(id => ({\r\n          id: id.toString(),\r\n          content:\r\n            \" \\\"afdasf asdf safasdf,, safasd! (sadf asdfasf, sadf) asdfsa fsadf sadf sadfasfsadf sad fasdf adsf asdf asdf safsd afsa fsfasd fasf sad\",\r\n          start: false\r\n        }));\r\n      // window.webapp.startReader(data, \"50\");\r\n      window.webapp.startQuiz([{\r\n        type: 'word',\r\n        sentence: 'hello world',\r\n        wordIndex: 1,\r\n        options: ['hihi', 'hoho'],\r\n        answer: 0,\r\n        id: '1'\r\n      },{\r\n        type: 'word',\r\n        sentence: 'hello world',\r\n        wordIndex: 1,\r\n        options: ['hihi', 'hoho'],\r\n        answer: 0,\r\n        id: '2'\r\n      }], '')\r\n    }\r\n  }, []);\r\n  let out = <></>;\r\n  if (state) {\r\n    if (state.type === 'reader') {\r\n      out = <Reader sentences={state.sentences} readingSentence={state.sid} />;\r\n    }\r\n    if (state.type === 'quiz') {\r\n      out = <Quiz questions={state.questions} readingQuestion={state.qid} />;\r\n    }\r\n  }\r\n  return out;\r\n};\r\n\r\nexport default Wrapper;\r\n","import \"react-app-polyfill/stable\";\r\nimport \"./index.css\";\r\nimport \"./fonts/lora-latin-400.woff\"\r\nimport \"./fonts/lora-latin-700.woff\"\r\nimport \"./fonts/noto-sans-kr-latin-400.woff\"\r\nimport \"./fonts/noto-sans-kr-latin-500.woff\"\r\nimport \"./fonts/noto-sans-kr-latin-700.woff\"\r\n\r\nimport { Webapp } from \"./bridge\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    -moz-tap-highlight-color: rgba(0, 0, 0, 0);\r\n  }\r\n  body {\r\n    margin: 0;\r\n    font-family: 'Lora', serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    font-size: 21px;\r\n    user-select: none;\r\n    -moz-user-select: none;\r\n    -khtml-user-select: none;\r\n    -webkit-user-select: none;\r\n    -o-user-select: none;\r\n  }\r\n`;\r\n\r\nwindow.webapp = new Webapp();\r\nif (process.env.NODE_ENV === \"development\") {\r\n  window.webapp.setDev();\r\n}\r\nif (navigator.userAgent === \"ios\") {\r\n  window.webapp.setIOS();\r\n}\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <GlobalStyle/>\r\n    <Wrapper/>\r\n  </div>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}